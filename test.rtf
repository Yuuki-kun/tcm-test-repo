{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 public interface IRepository<T>\
\{\
    void Save(T entity);\
    void Delete(T entity);\
    T FindById(int id);\
    // C\'e1c ph\uc0\u432 \u417 ng th\u7913 c kh\'e1c c\u7847 n thi\u7871 t\
\}\
\
\
public interface IDataSource<T>\
\{\
    List<T> LoadData();\
    void SaveData(List<T> data);\
    // C\'e1c ph\uc0\u432 \u417 ng th\u7913 c kh\'e1c c\u7847 n thi\u7871 t\
\}\
\
using System.Collections.Generic;\
using System.IO;\
using Newtonsoft.Json;\
\
public class JSONRepository<T> : IRepository<T>\
\{\
    private readonly IDataSource<T> _dataSource;\
\
    public JSONRepository(IDataSource<T> dataSource)\
    \{\
        _dataSource = dataSource;\
    \}\
\
    public void Save(T entity)\
    \{\
        List<T> data = _dataSource.LoadData();\
        data.Add(entity);\
        _dataSource.SaveData(data);\
    \}\
\
    public void Delete(T entity)\
    \{\
        List<T> data = _dataSource.LoadData();\
        data.Remove(entity);\
        _dataSource.SaveData(data);\
    \}\
\
    public T FindById(int id)\
    \{\
        List<T> data = _dataSource.LoadData();\
        // T\'ecm entity theo ID\
        // return ...\
    \}\
    // C\'e0i \uc0\u273 \u7863 t c\'e1c ph\u432 \u417 ng th\u7913 c kh\'e1c c\u7847 n thi\u7871 t\
\}\
\
// Assume implementation for database repository\
public class DatabaseRepository<T> : IRepository<T>\
\{\
    // Implementation for interacting with database\
\}\
public class JSONDataSource<T> : IDataSource<T>\
\{\
    private readonly string _filePath;\
\
    public JSONDataSource(string filePath)\
    \{\
        _filePath = filePath;\
    \}\
\
    public List<T> LoadData()\
    \{\
        using (StreamReader file = File.OpenText(_filePath))\
        \{\
            JsonSerializer serializer = new JsonSerializer();\
            List<T> data = (List<T>)serializer.Deserialize(file, typeof(List<T>));\
            return data;\
        \}\
    \}\
\
    public void SaveData(List<T> data)\
    \{\
        using (StreamWriter file = File.CreateText(_filePath))\
        \{\
            JsonSerializer serializer = new JsonSerializer();\
            serializer.Serialize(file, data);\
        \}\
    \}\
    // C\'e0i \uc0\u273 \u7863 t c\'e1c ph\u432 \u417 ng th\u7913 c kh\'e1c c\u7847 n thi\u7871 t\
\}\
// Assume implementation for database data source\
public class DatabaseDataSource<T> : IDataSource<T>\
\{\
    // Implementation for interacting with database\
\}\
public class Context<T>\
\{\
    private IRepository<T> _repository;\
    private IDataSource<T> _dataSource;\
\
    public Context(IRepository<T> repository, IDataSource<T> dataSource)\
    \{\
        _repository = repository;\
        _dataSource = dataSource;\
    \}\
\
    public void SetRepository(IRepository<T> repository)\
    \{\
        _repository = repository;\
    \}\
\
    public void SetDataSource(IDataSource<T> dataSource)\
    \{\
        _dataSource = dataSource;\
    \}\
\
    public void SaveEntity(T entity)\
    \{\
        _repository.Save(entity);\
    \}\
\
    public void DeleteEntity(T entity)\
    \{\
        _repository.Delete(entity);\
    \}\
\
    public T FindEntityById(int id)\
    \{\
        return _repository.FindById(id);\
    \}\
\}\
\
public class ContextFactory\
\{\
    public static Context<T> CreateContext<T>(string dataFilePath)\
    \{\
        var jsonDataSource = new JSONDataSource<T>(dataFilePath);\
        var jsonRepository = new JSONRepository<T>(jsonDataSource);\
        return new Context<T>(jsonRepository, jsonDataSource);\
    \}\
\}\
// S\uc0\u7917  d\u7909 ng Context Factory \u273 \u7875  t\u7841 o Context cho Medicine\
var medicineContext = ContextFactory.CreateContext<Medicine>("medicine_data.json");\
\
// S\uc0\u7917  d\u7909 ng Context Factory \u273 \u7875  t\u7841 o Context cho MedicineCategory\
var medicineCategoryContext = ContextFactory.CreateContext<MedicineCategory>("medicine_category_data.json");\
\
// S\uc0\u7917  d\u7909 ng Context Factory \u273 \u7875  t\u7841 o Context cho Image\
var imageContext = ContextFactory.CreateContext<Image>("image_data.json");\
}